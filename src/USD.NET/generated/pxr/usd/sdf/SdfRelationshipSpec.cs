//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class SdfRelationshipSpec : SdfPropertySpec {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SdfRelationshipSpec(global::System.IntPtr cPtr, bool cMemoryOwn) : base(UsdCsPINVOKE.SdfRelationshipSpec_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SdfRelationshipSpec obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SdfRelationshipSpec() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_SdfRelationshipSpec(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SdfRelationshipSpecHandle New(SdfPrimSpecHandle owner, string name, bool custom, SdfVariability variability) {
    SdfRelationshipSpecHandle ret = new SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfRelationshipSpec_New__SWIG_0(SdfPrimSpecHandle.getCPtr(owner), name, custom, (int)variability), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfRelationshipSpecHandle New(SdfPrimSpecHandle owner, string name, bool custom) {
    SdfRelationshipSpecHandle ret = new SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfRelationshipSpec_New__SWIG_1(SdfPrimSpecHandle.getCPtr(owner), name, custom), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SdfRelationshipSpecHandle New(SdfPrimSpecHandle owner, string name) {
    SdfRelationshipSpecHandle ret = new SdfRelationshipSpecHandle(UsdCsPINVOKE.SdfRelationshipSpec_New__SWIG_2(SdfPrimSpecHandle.getCPtr(owner), name), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_SdfTargetsProxy GetTargetPathList() {
    SWIGTYPE_p_SdfTargetsProxy ret = new SWIGTYPE_p_SdfTargetsProxy(UsdCsPINVOKE.SdfRelationshipSpec_GetTargetPathList(swigCPtr), true);
    return ret;
  }

  public bool HasTargetPathList() {
    bool ret = UsdCsPINVOKE.SdfRelationshipSpec_HasTargetPathList(swigCPtr);
    return ret;
  }

  public void ClearTargetPathList() {
    UsdCsPINVOKE.SdfRelationshipSpec_ClearTargetPathList(swigCPtr);
  }

  public void ReplaceTargetPath(SdfPath oldPath, SdfPath newPath) {
    UsdCsPINVOKE.SdfRelationshipSpec_ReplaceTargetPath(swigCPtr, SdfPath.getCPtr(oldPath), SdfPath.getCPtr(newPath));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveTargetPath(SdfPath path, bool preserveTargetOrder) {
    UsdCsPINVOKE.SdfRelationshipSpec_RemoveTargetPath__SWIG_0(swigCPtr, SdfPath.getCPtr(path), preserveTargetOrder);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveTargetPath(SdfPath path) {
    UsdCsPINVOKE.SdfRelationshipSpec_RemoveTargetPath__SWIG_1(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_SdfRelationalAttributeSpecView GetAttributesForTargetPath(SdfPath path) {
    SWIGTYPE_p_SdfRelationalAttributeSpecView ret = new SWIGTYPE_p_SdfRelationalAttributeSpecView(UsdCsPINVOKE.SdfRelationshipSpec_GetAttributesForTargetPath(swigCPtr, SdfPath.getCPtr(path)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAttributesForTargetPath(SdfPath path, SdfAttributeSpecHandleVector newAttrs) {
    UsdCsPINVOKE.SdfRelationshipSpec_SetAttributesForTargetPath(swigCPtr, SdfPath.getCPtr(path), SdfAttributeSpecHandleVector.getCPtr(newAttrs));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool InsertAttributeForTargetPath(SdfPath path, SdfAttributeSpecHandle attr, int index) {
    bool ret = UsdCsPINVOKE.SdfRelationshipSpec_InsertAttributeForTargetPath__SWIG_0(swigCPtr, SdfPath.getCPtr(path), SdfAttributeSpecHandle.getCPtr(attr), index);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertAttributeForTargetPath(SdfPath path, SdfAttributeSpecHandle attr) {
    bool ret = UsdCsPINVOKE.SdfRelationshipSpec_InsertAttributeForTargetPath__SWIG_1(swigCPtr, SdfPath.getCPtr(path), SdfAttributeSpecHandle.getCPtr(attr));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveAttributeForTargetPath(SdfPath path, SdfAttributeSpecHandle attr) {
    UsdCsPINVOKE.SdfRelationshipSpec_RemoveAttributeForTargetPath(swigCPtr, SdfPath.getCPtr(path), SdfAttributeSpecHandle.getCPtr(attr));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfPathVector GetAttributeTargetPaths() {
    SdfPathVector ret = new SdfPathVector(UsdCsPINVOKE.SdfRelationshipSpec_GetAttributeTargetPaths(swigCPtr), true);
    return ret;
  }

  public SdfPath GetTargetPathForAttribute(SWIGTYPE_p_SdfAttributeSpecConstHandle attr) {
    SdfPath ret = new SdfPath(UsdCsPINVOKE.SdfRelationshipSpec_GetTargetPathForAttribute(swigCPtr, SWIGTYPE_p_SdfAttributeSpecConstHandle.getCPtr(attr)), true);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SdfPathVector GetAttributeOrderTargetPaths() {
    SdfPathVector ret = new SdfPathVector(UsdCsPINVOKE.SdfRelationshipSpec_GetAttributeOrderTargetPaths(swigCPtr), true);
    return ret;
  }

  public bool HasAttributeOrderForTargetPath(SdfPath path) {
    bool ret = UsdCsPINVOKE.SdfRelationshipSpec_HasAttributeOrderForTargetPath(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTargetAttributeOrders(SWIGTYPE_p_std__mapT_SdfPath_std__vectorT_TfToken_t_std__lessT_SdfPath_t_t orders) {
    UsdCsPINVOKE.SdfRelationshipSpec_SetTargetAttributeOrders(swigCPtr, SWIGTYPE_p_std__mapT_SdfPath_std__vectorT_TfToken_t_std__lessT_SdfPath_t_t.getCPtr(orders));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyAttributeOrderForTargetPath(SdfPath path, TfTokenVector vec) {
    UsdCsPINVOKE.SdfRelationshipSpec_ApplyAttributeOrderForTargetPath(swigCPtr, SdfPath.getCPtr(path), TfTokenVector.getCPtr(vec));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__mapT_SdfPath_std__string_SdfPath__FastLessThan_t GetTargetMarkers() {
    SWIGTYPE_p_std__mapT_SdfPath_std__string_SdfPath__FastLessThan_t ret = new SWIGTYPE_p_std__mapT_SdfPath_std__string_SdfPath__FastLessThan_t(UsdCsPINVOKE.SdfRelationshipSpec_GetTargetMarkers(swigCPtr), true);
    return ret;
  }

  public void SetTargetMarkers(SWIGTYPE_p_std__mapT_SdfPath_std__string_SdfPath__FastLessThan_t markers) {
    UsdCsPINVOKE.SdfRelationshipSpec_SetTargetMarkers(swigCPtr, SWIGTYPE_p_std__mapT_SdfPath_std__string_SdfPath__FastLessThan_t.getCPtr(markers));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetTargetMarker(SdfPath path) {
    string ret = UsdCsPINVOKE.SdfRelationshipSpec_GetTargetMarker(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTargetMarker(SdfPath path, string marker) {
    UsdCsPINVOKE.SdfRelationshipSpec_SetTargetMarker(swigCPtr, SdfPath.getCPtr(path), marker);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearTargetMarker(SdfPath path) {
    UsdCsPINVOKE.SdfRelationshipSpec_ClearTargetMarker(swigCPtr, SdfPath.getCPtr(path));
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public SdfPathVector GetTargetMarkerPaths() {
    SdfPathVector ret = new SdfPathVector(UsdCsPINVOKE.SdfRelationshipSpec_GetTargetMarkerPaths(swigCPtr), true);
    return ret;
  }

  public bool GetNoLoadHint() {
    bool ret = UsdCsPINVOKE.SdfRelationshipSpec_GetNoLoadHint(swigCPtr);
    return ret;
  }

  public void SetNoLoadHint(bool noload) {
    UsdCsPINVOKE.SdfRelationshipSpec_SetNoLoadHint(swigCPtr, noload);
  }

}

}
