//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace pxr {

public class UsdSkelTopology : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UsdSkelTopology(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UsdSkelTopology obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UsdSkelTopology() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          UsdCsPINVOKE.delete_UsdSkelTopology(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public UsdSkelTopology() : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_0(), true) {
  }

  public UsdSkelTopology(VtTokenArray paths) : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_1(VtTokenArray.getCPtr(paths)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdSkelTopology(TfToken paths, uint size) : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_2(TfToken.getCPtr(paths), size), true) {
  }

  public UsdSkelTopology(SdfPathVector paths) : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_3(SdfPathVector.getCPtr(paths)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public UsdSkelTopology(SdfPath paths, uint size) : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_4(SdfPath.getCPtr(paths), size), true) {
  }

  public UsdSkelTopology(VtIntArray parentIndices) : this(UsdCsPINVOKE.new_UsdSkelTopology__SWIG_5(VtIntArray.getCPtr(parentIndices)), true) {
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Validate(/*cstype*/ out string reason) {
    bool ret = UsdCsPINVOKE.UsdSkelTopology_Validate__SWIG_0(swigCPtr, out reason);
    if (UsdCsPINVOKE.SWIGPendingException.Pending) throw UsdCsPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Validate() {
    bool ret = UsdCsPINVOKE.UsdSkelTopology_Validate__SWIG_1(swigCPtr);
    return ret;
  }

  public VtIntArray GetParentIndices() {
    VtIntArray ret = new VtIntArray(UsdCsPINVOKE.UsdSkelTopology_GetParentIndices(swigCPtr), false);
    return ret;
  }

  public uint GetNumJoints() {
    uint ret = UsdCsPINVOKE.UsdSkelTopology_GetNumJoints(swigCPtr);
    return ret;
  }

  public int GetParent(uint index) {
    int ret = UsdCsPINVOKE.UsdSkelTopology_GetParent(swigCPtr, index);
    return ret;
  }

  public bool IsRoot(uint index) {
    bool ret = UsdCsPINVOKE.UsdSkelTopology_IsRoot(swigCPtr, index);
    return ret;
  }

}

}
